[
  {
    "role": "user",
    "parts": [
      {
        "text": "buatin code js polimorpism"
      }
    ]
  },
  {
    "role": "model",
    "parts": [
      {
        "text": "<p>Tentu, User! Sebagai seorang <strong>developer yang antusias</strong>, Anda pasti akan menyukai bagaimana JavaScript menangani polimorfisme.</p>\n<p>Dalam JavaScript, polimorfisme sering ditunjukkan melalui <strong>pewarisan (inheritance)</strong> dan <strong>penimpaan metode (method overriding)</strong>, yang memungkinkan objek dari kelas yang berbeda merespons panggilan metode yang sama dengan cara yang berbeda. Konsep utamanya adalah bahwa kita dapat memperlakukan objek dari subclass sebagai objek dari superclass-nya, tetapi ketika metode dipanggil, versi metode dari subclass-lah yang dieksekusi.</p>\n<p>Berikut adalah contoh kode JavaScript yang mengilustrasikan polimorfisme:</p>\n<pre><code class=\"language-javascript\">// Definisi kelas dasar (Superclass)\nclass Hewan {\n    constructor(nama) {\n        this.nama = nama;\n    }\n\n    // Metode umum\n    bersuara() {\n        return `<p>${this.nama} membuat suara yang umum.</p>`;\n    }\n}\n\n// Definisi kelas turunan (Subclass) - Kucing\nclass Kucing extends Hewan {\n    constructor(nama) {\n        super(nama); // Memanggil constructor dari kelas Hewan\n    }\n\n    // Penimpaan metode (Method Overriding)\n    bersuara() {\n        return `<p>${this.nama} mengeong! Meow!</p>`;\n    }\n}\n\n// Definisi kelas turunan (Subclass) - Anjing\nclass Anjing extends Hewan {\n    constructor(nama) {\n        super(nama);\n    }\n\n    // Penimpaan metode (Method Overriding)\n    bersuara() {\n        return `<p>${this.nama} menggonggong! Woof woof!</p>`;\n    }\n}\n\n// Fungsi yang menerima objek Hewan dan memanggil metode bersuara()\n// Fungsi ini menunjukkan polimorfisme karena dapat bekerja dengan objek\n// dari berbagai tipe yang mewarisi Hewan.\nfunction tampilkanSuara(hewan) {\n    // Meskipun kita tidak tahu persis tipe Hewan di sini,\n    // metode bersuara() yang benar akan dipanggil berdasarkan\n    // tipe objek saat runtime.\n    return hewan.bersuara();\n}\n\n// Membuat instance dari masing-masing kelas\nconst hewanUmum = new Hewan(\"Hewan Misterius\");\nconst kucingku = new Kucing(\"Milo\");\nconst anjingku = new Anjing(\"Buddy\");\n\n// Memanggil fungsi tampilkanSuara() dengan objek-objek yang berbeda\n// Perhatikan bagaimana metode bersuara() yang dipanggil adalah\n// versi yang berbeda tergantung pada tipe objeknya, meskipun\n// fungsi tampilkanSuara() memanggil metode dengan nama yang sama.\ndocument.write(tampilkanSuara(hewanUmum));\ndocument.write(tampilkanSuara(kucingku));\ndocument.write(tampilkanSuara(anjingku));\n\n// Contoh lain tanpa fungsi pembantu\ndocument.write(`<p>--- Contoh langsung ---</p>`);\ndocument.write(new Kucing(\"Luna\").bersuara());\ndocument.write(new Anjing(\"Max\").bersuara());\n</code></pre>\n<p>Dalam contoh di atas:</p>\n<ul>\n    <li>\n        <p>Kita memiliki kelas dasar <strong><code>Hewan</code></strong> dengan metode <strong><code>bersuara()</code></strong>.</p>\n    </li>\n    <li>\n        <p>Kelas <strong><code>Kucing</code></strong> dan <strong><code>Anjing</code></strong> adalah kelas turunan dari <strong><code>Hewan</code></strong>, dan keduanya <strong>menimpa (override)</strong> metode <strong><code>bersuara()</code></strong> untuk memberikan implementasi spesifik.</p>\n    </li>\n    <li>\n        <p>Fungsi <strong><code>tampilkanSuara()</code></strong> adalah contoh polimorfisme. Ia menerima argumen bertipe <strong><code>Hewan</code></strong> (atau apapun yang mewarisi <strong><code>Hewan</code></strong>). Ketika <strong><code>hewan.bersuara()</code></strong> dipanggil di dalamnya, JavaScript secara otomatis akan mengeksekusi versi <strong><code>bersuara()</code></strong> yang benar sesuai dengan tipe objek aktual pada saat <em>runtime</em> (apakah itu <strong><code>Hewan</code></strong>, <strong><code>Kucing</code></strong>, atau <strong><code>Anjing</code></strong>).</p>\n    </li>\n</ul>\n<p>Ini menunjukkan bahwa meskipun kita memanggil metode dengan nama yang sama (<strong><code>bersuara()</code></strong>), perilakunya bervariasi tergantung pada tipe objek yang memanggilnya. Ini adalah inti dari <strong>polimorfisme</strong>.</p>"
      }
    ]
  }
]