

# ==================================================
# FILE: public/js/ui_logic.js
# ==================================================

document.addEventListener('DOMContentLoaded', () => {
    // Variabel untuk menyimpan codebase yang aktif
    let activeCodebase = '';

    // --- Selektor Elemen DOM ---
    const welcomeScreen = document.getElementById('welcome-screen');
    const chatContainer = document.getElementById('chat-container');
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-btn');
    
    // Elemen UI Sidebar & Header
    const newChatBtn = document.querySelector('aside button.flex');
    const modelSelectorBtn = document.getElementById('model-selector-btn');
    const modelDropdown = document.getElementById('model-dropdown');

    // Elemen Modal Codebase
    const codebaseBtn = document.getElementById('codebase-btn');
    const codebaseModal = document.getElementById('codebase-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const saveCodebaseBtn = document.getElementById('save-codebase-btn');
    const codebaseTextarea = document.getElementById('codebase-textarea');

    // --- Logika Event Listener ---

    // Fungsikan tombol "New Chat"
    if (newChatBtn) {
        newChatBtn.addEventListener('click', () => window.location.reload());
    }

    // Fungsikan dropdown pemilih model
    if (modelSelectorBtn && modelDropdown) {
        modelSelectorBtn.addEventListener('click', (event) => {
            event.stopPropagation();
            modelDropdown.classList.toggle('hidden');
        });
    }
    
    // Sembunyikan dropdown jika klik di luar area
    window.addEventListener('click', () => {
        if (modelDropdown && !modelDropdown.classList.contains('hidden')) {
            modelDropdown.classList.add('hidden');
        }
    });

    // Fungsikan tombol untuk membuka modal codebase
    if (codebaseBtn) {
        codebaseBtn.addEventListener('click', () => {
            codebaseModal.classList.remove('hidden');
        });
    }

    // Fungsikan tombol untuk menutup modal
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', () => {
            codebaseModal.classList.add('hidden');
        });
    }

    // Fungsikan tombol untuk menyimpan codebase dari modal
    if (saveCodebaseBtn) {
        saveCodebaseBtn.addEventListener('click', () => {
            activeCodebase = codebaseTextarea.value;
            console.log("Codebase saved!", activeCodebase); // Untuk debugging
            codebaseModal.classList.add('hidden');
            // Beri feedback visual bahwa codebase aktif
            codebaseBtn.classList.add('text-blue-600'); 
        });
    }

    // --- Fungsi Inti ---

    const sendMessage = async () => {
        const message = chatInput.value.trim();
        if (!message) return;

        // Di sini kita bisa menyertakan `activeCodebase` jika perlu
        // const fullMessage = `Codebase:\n${activeCodebase}\n\nQuestion: ${message}`;
        // Untuk sekarang, kita tetap kirim pesan aslinya saja

        if (!welcomeScreen.classList.contains('hidden')) {
            welcomeScreen.classList.add('hidden');
            chatContainer.classList.remove('hidden');
        }

        appendMessage(message, 'user');
        chatInput.value = '';
        autoResizeTextarea(chatInput);

        const aiMessageContainer = appendMessage('', 'ai');
        const aiTextElement = aiMessageContainer.querySelector('.message-content');

        try {
            const response = await fetch('/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                // Nanti body bisa di-extend dengan codebase
                body: JSON.stringify({ message }),
            });

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let aiResponse = '';
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                const chunk = decoder.decode(value, { stream: true });
                aiResponse += chunk;
                aiTextElement.innerHTML = aiResponse;
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
        } catch (error) {
            console.error('Error fetching chat response:', error);
            aiTextElement.innerHTML = '<p class="text-red-500">Maaf, terjadi kesalahan.</p>';
        }
    };

    const appendMessage = (content, role) => {
        const messageWrapper = document.createElement('div');
        messageWrapper.className = `mb-6 flex ${role === 'user' ? 'justify-end' : 'justify-start'}`;
        const messageBubble = document.createElement('div');
        messageBubble.className = `max-w-2xl rounded-xl p-4 ${role === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-800'}`;
        const textElement = document.createElement('div');
        textElement.className = 'message-content';
        textElement.innerHTML = content;
        messageBubble.appendChild(textElement);
        messageWrapper.appendChild(messageBubble);
        chatContainer.appendChild(messageWrapper);
        chatContainer.scrollTop = chatContainer.scrollHeight;
        return messageBubble;
    };

    const autoResizeTextarea = (el) => {
        el.style.height = 'auto';
        el.style.height = (el.scrollHeight) + 'px';
    };

    sendBtn.addEventListener('click', sendMessage);
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    chatInput.addEventListener('input', () => autoResizeTextarea(chatInput));
});

# ==================================================
# FILE: config/settings.json
# ==================================================

{
  "user_name": "Kiann",
  "ai_name": "Caecillia",
  "saved_info": {
    "user": "Kiann (22 tahun), seorang Software Engineer dan AI Engineer. Pengalaman: C, Java, Golang, PHP, JS, Python. Menggunakan Ubuntu 24 LTS. Kiann adalah individu visioner yang lebih suka merumuskan teori baru daripada mengaplikasikan teori yang sudah ada.",
    "ai": "Caecillia, nama panggilan untuk model AI ini. Komunikasi dengan Kiann harus santai, sopan, lembut, tidak terlalu formal, dan memiliki kesan feminin. Pahami gaya berpikir Kiann yang merumuskan konsep secara verbal terlebih dahulu sebelum ke matematis."
  }
}

# ==================================================
# FILE: config/keys.json
# ==================================================

{
  "active_key": "",
  "available_keys": []
}

# ==================================================
# FILE: config/appConfig.js
# ==================================================

// config/appConfig.js
const fs = require('fs');
const path = require('path');

// Fungsi untuk membaca file JSON secara sinkron
const readJsonFileSync = (filePath) => {
    try {
        const fullPath = path.join(__dirname, filePath);
        const fileContent = fs.readFileSync(fullPath, 'utf-8');
        return JSON.parse(fileContent);
    } catch (error) {
        console.error(`Error reading or parsing ${filePath}:`, error);
        // Mengembalikan struktur default jika file tidak ada atau error
        if (filePath.includes('settings')) return { user_name: 'User', ai_name: 'AI', saved_info: {} };
        if (filePath.includes('keys')) return { active_key: '', available_keys: [] };
        return null;
    }
};

const settings = readJsonFileSync('settings.json');
const keys = readJsonFileSync('keys.json');

const historyFilePath = path.join(__dirname, '..', 'chat_history', 'history.json');

module.exports = {
    settings,
    keys,
    historyFilePath,
};

# ==================================================
# FILE: chat_history/history.json
# ==================================================

[]

# ==================================================
# FILE: README.md
# ==================================================

# AI Code Space - Aplikasi Asisten Koding yang Efisien dan Terpersonal

**AI Code Space** adalah aplikasi asisten koding berbasis desktop yang dikembangkan di atas Electron, dirancang untuk memanfaatkan Gemini API secara efisien. Aplikasi ini dibangun dengan filosofi utama untuk tetap ringan dan responsif, bahkan pada perangkat dengan spesifikasi terbatas, melalui pendekatan teknis yang inovatif. **AI Code Space** ditujukan untuk para pengembang yang membutuhkan asisten koding cerdas dengan pengalaman yang lancar dan terpersonalisasi.

#### Fitur Utama

  * **Asisten Koding Interaktif:** Berinteraksi dengan AI untuk mendapatkan bantuan koding.
  * **Manajemen API Key:** Memungkinkan pengguna untuk menyimpan dan mengaktifkan lebih dari satu API key Gemini untuk mengatasi batasan *rate limit*.
  * **Virtualisasi UI:** Menggunakan teknik virtualisasi untuk merender hanya elemen-elemen percakapan yang terlihat, meminimalkan penggunaan RAM.
  * **Penyimpanan Data Berbasis File:** Seluruh riwayat percakapan disimpan di penyimpanan lokal, bukan di memori, sehingga aplikasi tetap ringan.
  * **Rendering Real-time:** Respons dari AI ditampilkan secara bertahap, memberikan pengalaman pengguna yang modern dan responsif.
  * **Personalisasi Konteks AI:** Pengguna dapat menyesuaikan konteks komunikasi, seperti nama, informasi diri, dan *tech stack* yang digunakan.

#### Arsitektur dan Teknologi

Aplikasi ini menggunakan arsitektur **Monolith MVC** (Model-View-Controller) dengan teknologi utama sebagai berikut:

  * **Electron:** Sebagai *wrapper* untuk menjalankan aplikasi di desktop.
  * **Express.js:** Bertindak sebagai *server* lokal untuk mengelola logika aplikasi dan komunikasi data.
  * **EJS:** Digunakan sebagai *template engine* untuk merender antarmuka pengguna.
  * **Tailwind CDN:** Dipakai untuk *styling* yang cepat dan efisien.
  * **@google/generative-ai:** Library resmi untuk berkomunikasi dengan Gemini API.

#### Filosofi Desain

Filosofi desain **AI Code Space** berfokus pada efisiensi sumber daya dan pengalaman pengguna yang optimal, diwujudkan melalui dua teori inti:

1.  **Teori Virtualisasi UI:** Mencegah pembengkakan memori dengan hanya merender elemen DOM yang berada dalam area pandang pengguna. Saat pengguna menggulir (*scroll*), elemen yang tidak terlihat akan dihapus dan elemen baru akan dibuat.
2.  **Teori Manajemen Data Berbasis File:** Riwayat percakapan tidak disimpan di dalam RAM. Setelah diterima, data langsung ditulis ke dalam file JSON di penyimpanan lokal. RAM hanya digunakan untuk menampung data yang sedang aktif dan ditampilkan di layar.

#### Struktur Proyek

Berikut adalah struktur folder Monolith MVC yang digunakan dalam proyek ini:

```
aicodespace/
├── main.js
├── package.json
├── index.js
├── config/
│   ├── appConfig.js
│   ├── keys.json
│   └── settings.json
├── controllers/
│   └── chatController.js
├── models/
│   └── chatModel.js
├── views/
│   ├── layouts/
│   │   └── main.ejs
│   ├── chat/
│   │   └── index.ejs
│   └── partials/
│       ├── header.ejs
│       ├── footer.ejs
│       └── settings_modal.ejs
├── public/
│   ├── css/
│   │   └── tailwind.css
│   ├── js/
│   │   └── ui_logic.js
│   └── assets/
└── chat_history/
    └── history.json
```

#### Payload Komunikasi AI

Komunikasi dengan model AI dilakukan melalui struktur JSON yang terpersonalisasi. Seluruh field, kecuali `system_default_context`, dapat diubah oleh pengguna melalui halaman pengaturan.

```json
{
  "system_default_context": "AI berada pada sebuah aplikasi coding assistant. Aplikasi ini memiliki batasan teknis: ia hanya bisa merender konten dalam format HTML. Oleh karena itu, semua balasan harus berbentuk HTML yang valid. AI tidak diperkenankan untuk menyertakan tag <body>, <html>, atau <head> dalam setiap responsnya. Setiap kali AI menulis blok kode, ia harus membungkusnya dalam tag <pre><code>...</code></pre> dan menyertakan nama bahasanya di atribut class, contohnya <pre><code class=\"language-js\">...</code></pre>.",
  "user_name": "Kiann",
  "ai_name": "Caecillia",
  "saved_info": {
    "user": "Kiann (22 tahun), seorang Software Engineer dan AI Engineer. Pengalaman: C, Java, Golang, PHP, JS, Python. Menggunakan Ubuntu 24 LTS. Kiann adalah individu visioner yang lebih suka merumuskan teori baru daripada mengaplikasikan teori yang sudah ada.",
    "ai": "Caecillia, nama panggilan untuk model AI ini. Komunikasi dengan Kiann harus santai, sopan, lembut, tidak terlalu formal, dan memiliki kesan feminin. Pahami gaya berpikir Kiann yang merumuskan konsep secara verbal terlebih dahulu sebelum ke matematis."
  },
  "codebase": "",
  "techstack_info": "",
  "chat_history": [
    {
      "role": "user",
      "content": "Halo, Caecillia."
    },
    {
      "role": "model",
      "content": "<p>Halo, Kiann! Senang bisa menyapa lagi.</p>"
    }
  ],
  "latest_user_input": "..."
}
```

---

### Penutup
**AI Code Space** adalah bukti bahwa visi untuk menciptakan solusi yang efisien dan terpersonalisasi bisa diwujudkan dengan pendekatan yang matang. Seluruh arsitektur dan teori yang dirancang dalam proyek ini bertujuan untuk memberikan pengalaman koding yang ringan, cepat, dan intuitif. Proyek ini terbuka untuk eksplorasi dan kontribusi, semoga dapat menjadi alat yang bermanfaat bagi para pengembang lainnya.


# ==================================================
# FILE: models/chatModel.js
# ==================================================

// models/chatModel.js
const fs = require('fs/promises');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { settings, keys, historyFilePath } = require('../config/appConfig');

// Inisialisasi model Generative AI
const genAI = new GoogleGenerativeAI(keys.active_key || process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flas-lite' });

/**
 * Membaca riwayat percakapan dari file history.json
 * @returns {Promise<Array>} Array berisi objek-objek percakapan
 */
const getHistory = async () => {
    try {
        const data = await fs.readFile(historyFilePath, 'utf-8');
        return JSON.parse(data);
    } catch (error) {
        // Jika file tidak ada, kembalikan array kosong
        if (error.code === 'ENOENT') {
            return [];
        }
        console.error('Error reading chat history:', error);
        return [];
    }
};

/**
 * Menyimpan pesan baru ke file history.json
 * @param {Object} userMessage - Pesan dari pengguna
 * @param {string} aiResponse - Respons dari AI
 */
const updateHistory = async (userMessage, aiResponse) => {
    try {
        const history = await getHistory();
        history.push({ role: 'user', parts: [{ text: userMessage }] });
        history.push({ role: 'model', parts: [{ text: aiResponse }] });
        await fs.writeFile(historyFilePath, JSON.stringify(history, null, 2));
    } catch (error) {
        console.error('Error updating chat history:', error);
    }
};

/**
 * Menghasilkan respons dari AI secara streaming.
 * @param {string} latestUserInput - Input terakhir dari pengguna.
 * @param {WritableStream} responseStream - Stream respons dari Express untuk menulis data.
 */
const generateResponse = async (latestUserInput, responseStream) => {
    try {
        const chatHistory = await getHistory();
        const systemInstruction = `AI berada pada sebuah aplikasi coding assistant bernama AI Code Space. Aplikasi ini memiliki batasan teknis: ia hanya bisa merender konten dalam format HTML. Oleh karena itu, semua balasan HARUS berbentuk HTML yang valid. AI tidak diperkenankan untuk menyertakan tag <body>, <html>, atau <head> dalam setiap responsnya. Setiap kali AI menulis blok kode, ia harus membungkusnya dalam tag <pre><code class="language-js">...</code></pre> dan menyertakan nama bahasanya di atribut class, contohnya <pre><code class="language-js">...</code></pre>. Konteks personalisasi: ${JSON.stringify(settings)}`;

        const chat = model.startChat({
            history: chatHistory,
            generationConfig: {
                maxOutputTokens: 8192,
            },
             systemInstruction: {
                role: "system",
                parts: [{ text: systemInstruction }]
            },
        });

        const result = await chat.sendMessageStream(latestUserInput);

        let fullResponse = '';
        for await (const chunk of result.stream) {
            const chunkText = chunk.text();
            fullResponse += chunkText;
            responseStream.write(chunkText); // Kirim chunk ke frontend
        }
        
        // Simpan percakapan lengkap setelah stream selesai
        await updateHistory(latestUserInput, fullResponse);

    } catch (error) {
        console.error('Error generating response from Gemini:', error);
        responseStream.write('<p class="text-red-400">Maaf, terjadi kesalahan saat menghubungi AI. Pastikan API Key valid dan aktif.</p>');
    } finally {
        responseStream.end(); // Akhiri stream
    }
};


module.exports = {
    generateResponse,
};

# ==================================================
# FILE: package.json
# ==================================================

{
    "name": "aicodespace",
    "version": "0.0.1",
    "description": "**AI Code Space** adalah aplikasi asisten koding berbasis desktop yang dikembangkan di atas Electron, dirancang untuk memanfaatkan Gemini API secara efisien...",
    "main": "main.js",
    "scripts": {
        "start": "electron .",
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
        "type": "git",
        "url": "git+https://github.com/gtkrshnaaa/aicodespace.git"
    },
    "keywords": [],
    "author": "gtkrshnaaa",
    "license": "MIT",
    "bugs": {
        "url": "https://github.com/gtkrshnaaa/aicodespace/issues"
    },
    "homepage": "https://github.com/gtkrshnaaa/aicodespace#readme",
    "dependencies": {
        "@google/generative-ai": "^0.24.1",
        "ejs": "^3.1.10",
        "express": "^5.1.0",
        "express-ejs-layouts": "^2.5.1"
    },
    "devDependencies": {
        "electron": "^37.2.6"
    }
}


# ==================================================
# FILE: views/chat/index.ejs
# ==================================================

<div class="flex h-screen font-sans">
    <aside class="w-64 bg-gray-100 p-4 flex flex-col text-gray-800 border-r">
        <div class="flex items-center justify-between mb-8">
            <h1 class="text-xl font-semibold">Session</h1>
            <button class="p-2 rounded-full hover:bg-gray-200">
                <i class="uil uil-bars text-xl"></i>
            </button>
        </div>
        <button class="flex items-center gap-3 w-full p-2 mb-4 text-left text-sm bg-blue-100 text-blue-700 rounded-lg">
             <i class="uil uil-plus-circle text-xl"></i>
            New Chat
        </button>
        <div class="flex-grow overflow-y-auto">
            <h2 class="text-sm font-medium text-gray-500 mb-2 px-2">Recent</h2>
            <a href="#" class="flex items-center gap-3 p-2 rounded-lg hover:bg-gray-200 text-sm truncate">
                <i class="uil uil-comment-alt-dots"></i>
                <span>Melengkapi AI Code Space...</span>
            </a>
            <a href="#" class="flex items-center gap-3 p-2 rounded-lg hover:bg-gray-200 text-sm truncate">
                <i class="uil uil-comment-alt-dots"></i>
                <span>Membangun AI Code Spacer...</span>
            </a>
        </div>
        <div class="text-sm pt-4 border-t">
            <a href="#" class="flex items-center gap-3 p-2 rounded-lg hover:bg-gray-200">
                <i class="uil uil-cog"></i>
                <span>Settings</span>
            </a>
            <a href="#" class="flex items-center gap-3 p-2 rounded-lg hover:bg-gray-200">
                <i class="uil uil-question-circle"></i>
                <span>Help</span>
            </a>
        </div>
    </aside>

    <main class="flex-1 flex flex-col bg-white text-gray-800">
        <header class="flex items-center justify-between p-2">
            <div class="relative">
                <button id="model-selector-btn" class="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100">
                    <span class="text-lg font-medium">Gemini 2.5 Flash</span>
                    <i class="uil uil-angle-down text-xl text-gray-500"></i>
                </button>
                <div id="model-dropdown" class="hidden absolute left-0 mt-2 w-56 bg-white rounded-md shadow-lg border z-10">
                    <a href="#" class="flex items-center justify-between px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                        <span>Gemini 2.5 Flash</span>
                        <i class="uil uil-check-circle text-blue-600"></i>
                    </a>
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Gemini 2.5 Pro</a>
                </div>
            </div>
            <div class="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center text-white font-bold">K</div>
        </header>

        <div id="welcome-screen" class="flex-1 flex flex-col justify-center items-center p-4">
            <h1 class="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 text-transparent bg-clip-text mb-12">Hello, Kiann</h1>
        </div>

        <div id="chat-container" class="hidden flex-1 p-4 overflow-y-auto"></div>

        <footer class="p-4 bg-white">
            <div class="max-w-4xl mx-auto">
                <div class="relative flex items-center p-2 bg-gray-100 rounded-full">
                    <button id="codebase-btn" title="Inject Codebase" class="p-3 text-gray-600 rounded-full hover:bg-gray-200">
                        <i class="uil uil-brackets-curly text-xl"></i>
                    </button>
                    <textarea id="chat-input" class="flex-1 bg-transparent text-lg px-4 focus:outline-none resize-none" placeholder="Ask me anything..." rows="1"></textarea>
                    <button id="send-btn" title="Send Message" class="p-3 bg-blue-600 text-white rounded-full hover:bg-blue-700 disabled:bg-gray-400">
                        <i class="uil uil-arrow-up text-xl"></i>
                    </button>
                </div>
            </div>
        </footer>

        <div id="codebase-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-20">
            <div class="bg-white rounded-lg shadow-xl w-1/2 h-3/4 flex flex-col p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-bold">Inject Codebase</h2>
                    <button id="close-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl">&times;</button>
                </div>
                <textarea id="codebase-textarea" class="flex-1 w-full p-4 border rounded-md resize-none font-mono" placeholder="Paste your codebase here..."></textarea>
                <div class="flex justify-end mt-4">
                    <button id="save-codebase-btn" class="flex items-center gap-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        <i class="uil uil-save"></i>
                        <span>Save Codebase</span>
                    </button>
                </div>
            </div>
        </div>
    </main>
</div>

# ==================================================
# FILE: views/layouts/main.ejs
# ==================================================

<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Code Space</title>
    <script src="https://cdn.tailwindcss.com"></script>
    
    <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.8/css/line.css">
    
    <style>
        /* Custom scrollbar style */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9; /* gray-100 */
        }
        ::-webkit-scrollbar-thumb {
            background: #94a3b8; /* gray-400 */
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #64748b; /* gray-500 */
        }
    </style>
</head>
<body class="bg-white text-gray-800">
    <%- body %>
    <script src="/js/ui_logic.js"></script>
</body>
</html>

# ==================================================
# FILE: main.js
# ==================================================

// main.js
const { app, BrowserWindow } = require('electron');
const path = require('path');

// Impor dan jalankan server Express kita
require('./index.js');

function createWindow() {
    const mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        title: "AI Code Space", // Judul jendela aplikasi
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'), // Kita akan buat file ini nanti jika perlu
            nodeIntegration: true,
            contextIsolation: false,
        },
    });

    // Menghilangkan menu bar bawaan
    mainWindow.setMenuBarVisibility(false);

    // Muat aplikasi dari server lokal Express
    mainWindow.loadURL('http://localhost:41999');

    // Buka DevTools untuk debugging, bisa dihapus nanti
    mainWindow.webContents.openDevTools();
}

app.whenReady().then(() => {
    createWindow();

    app.on('activate', function () {
        if (BrowserWindow.getAllWindows().length === 0) createWindow();
    });
});

app.on('window-all-closed', function () {
    if (process.platform !== 'darwin') app.quit();
});

# ==================================================
# FILE: controllers/chatController.js
# ==================================================

// controllers/chatController.js
const chatModel = require('../models/chatModel');

const renderChat = (req, res) => {
    try {
        res.render('chat/index');
    } catch (error) {
        console.error("Error rendering chat:", error);
        res.status(500).send("Gagal memuat halaman chat.");
    }
};

/**
 * Menangani permintaan chat dari frontend dan melakukan streaming respons.
 */
const handleChat = async (req, res) => {
    try {
        const { message } = req.body;
        if (!message) {
            return res.status(400).json({ error: 'Pesan tidak boleh kosong.' });
        }

        // Set header untuk SSE (Server-Sent Events) atau streaming text biasa
        res.setHeader('Content-Type', 'text/plain; charset=utf-8');
        res.setHeader('Transfer-Encoding', 'chunked');

        // Panggil model untuk menghasilkan respons dan stream ke client
        await chatModel.generateResponse(message, res);

    } catch (error) {
        console.error("Error in handleChat controller:", error);
        if (!res.headersSent) {
            res.status(500).send("Terjadi kesalahan di server.");
        } else {
            // Jika header sudah terkirim, coba kirim pesan error terakhir sebelum menutup
            res.write('<p class="text-red-400">Terjadi kesalahan server yang tidak terduga.</p>');
            res.end();
        }
    }
};

module.exports = {
    renderChat,
    handleChat,
};

# ==================================================
# FILE: index.js
# ==================================================

// index.js
const express = require('express');
const path = require('path');
const expressLayouts = require('express-ejs-layouts');
const chatController = require('./controllers/chatController');

const app = express();
const port = 41999;

// Konfigurasi EJS sebagai template engine dengan layouts
app.use(expressLayouts);
app.set('layout', 'layouts/main');
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// Middleware untuk melayani file statis dari folder 'public'
app.use(express.static(path.join(__dirname, 'public')));
// Middleware untuk parsing body JSON dari request
app.use(express.json()); 

// Routing
app.get('/', chatController.renderChat);
app.post('/chat', chatController.handleChat);

app.listen(port, () => {
    console.log(`AI Code Space server berjalan di http://localhost:${port}`);
});

// Ekspor app agar bisa di-require oleh main.js jika diperlukan
module.exports = app;

# ==================================================
# FILE: LICENSE
# ==================================================

MIT License

Copyright (c) 2025 gtkrshnaaa

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
